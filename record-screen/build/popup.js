
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, v as validate_slots, e as element, a as svg_element, b as space, c as attr_dev, f as add_location, h as insert_dev, j as append_dev, l as listen_dev, n as noop, k as detach_dev, r as run_all, p as prop_dev, m as validate_each_argument, o as binding_callbacks, q as bind, t as create_component, u as mount_component, w as add_flush_callback, x as transition_in, y as transition_out, z as destroy_component, A as group_outros, B as check_outros, C as destroy_each, D as onMount } from './index-ac68a7eb.js';

const bg = window["chrome"].extension.getBackgroundPage();

/* src/popup/Item.svelte generated by Svelte v3.35.0 */

const { console: console_1 } = globals;
const file$3 = "src/popup/Item.svelte";

// (91:6) {:else}
function create_else_block$1(ctx) {
	let svg;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file$3, 97, 11, 2720);
			attr_dev(path1, "d", "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z");
			add_location(path1, file$3, 97, 49, 2758);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			add_location(svg, file$3, 91, 8, 2561);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(91:6) {:else}",
		ctx
	});

	return block;
}

// (80:6) {#if expand}
function create_if_block_1$1(ctx) {
	let svg;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file$3, 86, 11, 2404);
			attr_dev(path1, "d", "M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z");
			add_location(path1, file$3, 86, 49, 2442);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			add_location(svg, file$3, 80, 8, 2245);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(80:6) {#if expand}",
		ctx
	});

	return block;
}

// (105:2) {#if expand}
function create_if_block$1(ctx) {
	let div;
	let button0;
	let svg0;
	let path0;
	let path1;
	let t0;
	let button1;
	let svg1;
	let path2;
	let path3;
	let t1;
	let button2;
	let svg2;
	let path4;
	let path5;
	let t2;
	let button3;
	let svg3;
	let path6;
	let path7;
	let path8;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			button0 = element("button");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			t0 = space();
			button1 = element("button");
			svg1 = svg_element("svg");
			path2 = svg_element("path");
			path3 = svg_element("path");
			t1 = space();
			button2 = element("button");
			svg2 = svg_element("svg");
			path4 = svg_element("path");
			path5 = svg_element("path");
			t2 = space();
			button3 = element("button");
			svg3 = svg_element("svg");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file$3, 114, 10, 3150);
			attr_dev(path1, "d", "M8 5v14l11-7z");
			add_location(path1, file$3, 114, 48, 3188);
			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg0, "height", "24");
			attr_dev(svg0, "viewBox", "0 0 24 24");
			attr_dev(svg0, "width", "24");
			attr_dev(svg0, "fill", "#ffffff");
			add_location(svg0, file$3, 107, 8, 2982);
			attr_dev(button0, "title", "Play");
			attr_dev(button0, "class", "svelte-1ashnsg");
			add_location(button0, file$3, 106, 6, 2936);
			attr_dev(path2, "d", "M0 0h24v24H0z");
			attr_dev(path2, "fill", "none");
			add_location(path2, file$3, 125, 10, 3474);
			attr_dev(path3, "d", "M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z");
			add_location(path3, file$3, 125, 48, 3512);
			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg1, "height", "24px");
			attr_dev(svg1, "viewBox", "0 0 24 24");
			attr_dev(svg1, "width", "24px");
			attr_dev(svg1, "fill", "#ffffff");
			add_location(svg1, file$3, 118, 8, 3302);
			attr_dev(button1, "title", "Upload");
			attr_dev(button1, "class", "svelte-1ashnsg");
			add_location(button1, file$3, 117, 6, 3252);
			attr_dev(path4, "d", "M0 0h24v24H0z");
			attr_dev(path4, "fill", "none");
			add_location(path4, file$3, 138, 10, 3844);
			attr_dev(path5, "d", "M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z");
			add_location(path5, file$3, 138, 48, 3882);
			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg2, "height", "24");
			attr_dev(svg2, "viewBox", "0 0 24 24");
			attr_dev(svg2, "width", "24");
			attr_dev(svg2, "fill", "#ffffff");
			add_location(svg2, file$3, 131, 8, 3676);
			attr_dev(button2, "title", "Download");
			attr_dev(button2, "class", "svelte-1ashnsg");
			add_location(button2, file$3, 130, 6, 3622);
			attr_dev(path6, "d", "M0 0h24v24H0z");
			attr_dev(path6, "fill", "none");
			add_location(path6, file$3, 151, 10, 4218);
			attr_dev(path7, "d", "M0 0h24v24H0V0z");
			attr_dev(path7, "fill", "none");
			add_location(path7, file$3, 151, 48, 4256);
			attr_dev(path8, "d", "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z");
			add_location(path8, file$3, 154, 12, 4330);
			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg3, "height", "24");
			attr_dev(svg3, "viewBox", "0 0 24 24");
			attr_dev(svg3, "width", "24");
			attr_dev(svg3, "fill", "#ffffff");
			add_location(svg3, file$3, 144, 8, 4050);
			attr_dev(button3, "title", "Delete");
			attr_dev(button3, "class", "svelte-1ashnsg");
			add_location(button3, file$3, 143, 6, 3996);
			attr_dev(div, "class", "expand svelte-1ashnsg");
			add_location(div, file$3, 105, 4, 2909);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, button0);
			append_dev(button0, svg0);
			append_dev(svg0, path0);
			append_dev(svg0, path1);
			append_dev(div, t0);
			append_dev(div, button1);
			append_dev(button1, svg1);
			append_dev(svg1, path2);
			append_dev(svg1, path3);
			append_dev(div, t1);
			append_dev(div, button2);
			append_dev(button2, svg2);
			append_dev(svg2, path4);
			append_dev(svg2, path5);
			append_dev(div, t2);
			append_dev(div, button3);
			append_dev(button3, svg3);
			append_dev(svg3, path6);
			append_dev(svg3, path7);
			append_dev(svg3, path8);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*play*/ ctx[9], false, false, false),
					listen_dev(button1, "click", /*upload*/ ctx[7], false, false, false),
					listen_dev(button2, "click", /*download*/ ctx[8], false, false, false),
					listen_dev(button3, "click", /*deleteItem*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(105:2) {#if expand}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div1;
	let div0;
	let input;
	let input_value_value;
	let input_style_value;
	let input_readonly_value;
	let input_title_value;
	let t0;
	let button0;
	let svg;
	let path0;
	let path1;
	let button0_style_value;
	let t1;
	let button1;
	let button1_title_value;
	let t2;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*expand*/ ctx[2]) return create_if_block_1$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*expand*/ ctx[2] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			button0 = element("button");
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			t1 = space();
			button1 = element("button");
			if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			attr_dev(input, "type", "text");

			input.value = input_value_value = /*item*/ ctx[0].name.length > max_length_name
			? splitName(/*item*/ ctx[0].name)
			: /*item*/ ctx[0].name;

			attr_dev(input, "style", input_style_value = "user-selcet: none;" + (/*editable*/ ctx[1] ? "font-style: italic;" : ""));
			attr_dev(input, "spellcheck", "false");
			input.readOnly = input_readonly_value = !/*editable*/ ctx[1];
			attr_dev(input, "title", input_title_value = "Double click to rename: " + /*item*/ ctx[0].name);
			attr_dev(input, "class", "svelte-1ashnsg");
			add_location(input, file$3, 53, 4, 1391);
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file$3, 75, 8, 2057);
			attr_dev(path1, "d", "M8 5v14l11-7z");
			add_location(path1, file$3, 75, 46, 2095);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			add_location(svg, file$3, 68, 6, 1903);
			attr_dev(button0, "style", button0_style_value = /*expand*/ ctx[2] ? "opacity: 0;" : "");
			attr_dev(button0, "title", "Play");
			attr_dev(button0, "class", "svelte-1ashnsg");
			add_location(button0, file$3, 67, 4, 1823);
			attr_dev(button1, "title", button1_title_value = /*expand*/ ctx[2] ? "Expand" : "Collapse");
			attr_dev(button1, "class", "svelte-1ashnsg");
			add_location(button1, file$3, 78, 4, 2153);
			attr_dev(div0, "class", "item-top svelte-1ashnsg");
			add_location(div0, file$3, 52, 2, 1364);
			attr_dev(div1, "class", "item");
			add_location(div1, file$3, 51, 0, 1343);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, input);
			append_dev(div0, t0);
			append_dev(div0, button0);
			append_dev(button0, svg);
			append_dev(svg, path0);
			append_dev(svg, path1);
			append_dev(div0, t1);
			append_dev(div0, button1);
			if_block0.m(button1, null);
			append_dev(div1, t2);
			if (if_block1) if_block1.m(div1, null);

			if (!mounted) {
				dispose = [
					listen_dev(input, "keyup", /*onKeyup*/ ctx[3], false, false, false),
					listen_dev(input, "dblclick", /*dblclick*/ ctx[5], false, false, false),
					listen_dev(input, "pointerup", /*click*/ ctx[6], false, false, false),
					listen_dev(input, "blur", /*blur_handler*/ ctx[11], false, false, false),
					listen_dev(button0, "click", /*play*/ ctx[9], false, false, false),
					listen_dev(button1, "click", /*click*/ ctx[6], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*item*/ 1 && input_value_value !== (input_value_value = /*item*/ ctx[0].name.length > max_length_name
			? splitName(/*item*/ ctx[0].name)
			: /*item*/ ctx[0].name) && input.value !== input_value_value) {
				prop_dev(input, "value", input_value_value);
			}

			if (dirty & /*editable*/ 2 && input_style_value !== (input_style_value = "user-selcet: none;" + (/*editable*/ ctx[1] ? "font-style: italic;" : ""))) {
				attr_dev(input, "style", input_style_value);
			}

			if (dirty & /*editable*/ 2 && input_readonly_value !== (input_readonly_value = !/*editable*/ ctx[1])) {
				prop_dev(input, "readOnly", input_readonly_value);
			}

			if (dirty & /*item*/ 1 && input_title_value !== (input_title_value = "Double click to rename: " + /*item*/ ctx[0].name)) {
				attr_dev(input, "title", input_title_value);
			}

			if (dirty & /*expand*/ 4 && button0_style_value !== (button0_style_value = /*expand*/ ctx[2] ? "opacity: 0;" : "")) {
				attr_dev(button0, "style", button0_style_value);
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(button1, null);
				}
			}

			if (dirty & /*expand*/ 4 && button1_title_value !== (button1_title_value = /*expand*/ ctx[2] ? "Expand" : "Collapse")) {
				attr_dev(button1, "title", button1_title_value);
			}

			if (/*expand*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const max_length_name = 26;

function splitName(name) {
	const min = Math.min(max_length_name, name.length);
	const a = name.slice(0, min / 2);
	const b = name.slice(Math.floor(-min / 2));
	return `${a}...${b}`;
}

function instance$3($$self, $$props, $$invalidate) {
	let expand;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Item", slots, []);
	let { item } = $$props;
	let { active = "" } = $$props;
	let editable = false;

	function onKeyup(event) {
		const element = event.target;
		console.log(element.value);
		$$invalidate(0, item.name = element.value, item);
		bg.execCommand("RENAME_ITEM", { id: item.id, name: item.name });
	}

	function deleteItem() {
		const id = item.id;
		bg.execCommand("DELETE_ITEM", { id });
	}

	let is_dbl_click_timeout = -1;

	function dblclick(event) {
		clearTimeout(is_dbl_click_timeout);
		const element = event.target;
		$$invalidate(1, editable = true);
		element.setSelectionRange(0, 0);
	}

	function click(event) {
		clearTimeout(is_dbl_click_timeout);

		is_dbl_click_timeout = setTimeout(
			() => {
				if (expand) {
					if (!editable) $$invalidate(10, active = "");
				} else $$invalidate(10, active = item.id);
			},
			100
		);
	}

	function upload() {
		bg.execCommand("UPLOAD_ITEM", { id: item.id });
	}

	function download() {
		bg.execCommand("DOWNLOAD_ITEM", { id: item.id });
	}

	function play() {
		bg.execCommand("PLAY_ITEM", { id: item.id });
	}

	const writable_props = ["item", "active"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Item> was created with unknown prop '${key}'`);
	});

	const blur_handler = () => $$invalidate(1, editable = false);

	$$self.$$set = $$props => {
		if ("item" in $$props) $$invalidate(0, item = $$props.item);
		if ("active" in $$props) $$invalidate(10, active = $$props.active);
	};

	$$self.$capture_state = () => ({
		bg,
		item,
		active,
		editable,
		max_length_name,
		splitName,
		onKeyup,
		deleteItem,
		is_dbl_click_timeout,
		dblclick,
		click,
		upload,
		download,
		play,
		expand
	});

	$$self.$inject_state = $$props => {
		if ("item" in $$props) $$invalidate(0, item = $$props.item);
		if ("active" in $$props) $$invalidate(10, active = $$props.active);
		if ("editable" in $$props) $$invalidate(1, editable = $$props.editable);
		if ("is_dbl_click_timeout" in $$props) is_dbl_click_timeout = $$props.is_dbl_click_timeout;
		if ("expand" in $$props) $$invalidate(2, expand = $$props.expand);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*active, item*/ 1025) {
			$$invalidate(2, expand = active === item.id);
		}
	};

	return [
		item,
		editable,
		expand,
		onKeyup,
		deleteItem,
		dblclick,
		click,
		upload,
		download,
		play,
		active,
		blur_handler
	];
}

class Item extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { item: 0, active: 10 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Item",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*item*/ ctx[0] === undefined && !("item" in props)) {
			console_1.warn("<Item> was created without expected prop 'item'");
		}
	}

	get item() {
		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set item(value) {
		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active() {
		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/popup/List.svelte generated by Svelte v3.35.0 */
const file$2 = "src/popup/List.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (7:2) {#each list.sort((a, b) => b.created_at - a.created_at) as item}
function create_each_block(ctx) {
	let item;
	let updating_active;
	let current;

	function item_active_binding(value) {
		/*item_active_binding*/ ctx[2](value);
	}

	let item_props = { item: /*item*/ ctx[3] };

	if (/*active*/ ctx[1] !== void 0) {
		item_props.active = /*active*/ ctx[1];
	}

	item = new Item({ props: item_props, $$inline: true });
	binding_callbacks.push(() => bind(item, "active", item_active_binding));

	const block = {
		c: function create() {
			create_component(item.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(item, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const item_changes = {};
			if (dirty & /*list*/ 1) item_changes.item = /*item*/ ctx[3];

			if (!updating_active && dirty & /*active*/ 2) {
				updating_active = true;
				item_changes.active = /*active*/ ctx[1];
				add_flush_callback(() => updating_active = false);
			}

			item.$set(item_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(item.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(item.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(item, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(7:2) {#each list.sort((a, b) => b.created_at - a.created_at) as item}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let current;
	let each_value = /*list*/ ctx[0].sort(func);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "list svelte-slqfbs");
			add_location(div, file$2, 5, 0, 102);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*list, active*/ 3) {
				each_value = /*list*/ ctx[0].sort(func);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = (a, b) => b.created_at - a.created_at;

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("List", slots, []);
	let { list = [] } = $$props;
	let active = "";
	const writable_props = ["list"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<List> was created with unknown prop '${key}'`);
	});

	function item_active_binding(value) {
		active = value;
		$$invalidate(1, active);
	}

	$$self.$$set = $$props => {
		if ("list" in $$props) $$invalidate(0, list = $$props.list);
	};

	$$self.$capture_state = () => ({ Item, list, active });

	$$self.$inject_state = $$props => {
		if ("list" in $$props) $$invalidate(0, list = $$props.list);
		if ("active" in $$props) $$invalidate(1, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [list, active, item_active_binding];
}

class List extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { list: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "List",
			options,
			id: create_fragment$2.name
		});
	}

	get list() {
		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set list(value) {
		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/popup/Settings.svelte generated by Svelte v3.35.0 */

const file$1 = "src/popup/Settings.svelte";

function create_fragment$1(ctx) {
	let div;
	let h2;
	let t1;
	let input;

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			h2.textContent = "Disk Quote (GB)";
			t1 = space();
			input = element("input");
			add_location(h2, file$1, 1, 2, 25);
			attr_dev(input, "type", "number");
			attr_dev(input, "min", 5);
			attr_dev(input, "max", 200);
			input.value = 20;
			attr_dev(input, "class", "svelte-1flynel");
			add_location(input, file$1, 2, 2, 52);
			attr_dev(div, "class", "settings");
			add_location(div, file$1, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(div, t1);
			append_dev(div, input);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Settings", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Settings> was created with unknown prop '${key}'`);
	});

	return [];
}

class Settings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Settings",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/popup/Popup.svelte generated by Svelte v3.35.0 */
const file = "src/popup/Popup.svelte";

// (71:37) 
function create_if_block_3(ctx) {
	let button;
	let svg;
	let path0;
	let path1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file, 79, 10, 2624);
			attr_dev(path1, "d", "M6 6h12v12H6z");
			add_location(path1, file, 79, 48, 2662);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			attr_dev(svg, "class", "svelte-so2j8x");
			add_location(svg, file, 72, 8, 2456);
			attr_dev(button, "class", "svelte-so2j8x");
			add_location(button, file, 71, 6, 2414);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, svg);
			append_dev(svg, path0);
			append_dev(svg, path1);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*stopRecording*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(71:37) ",
		ctx
	});

	return block;
}

// (56:4) {#if status === "idle"}
function create_if_block_2(ctx) {
	let button;
	let svg;
	let path;
	let circle;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			svg = svg_element("svg");
			path = svg_element("path");
			circle = svg_element("circle");
			attr_dev(path, "d", "M24 24H0V0h24v24z");
			attr_dev(path, "fill", "none");
			add_location(path, file, 63, 11, 2218);
			attr_dev(circle, "cx", "12");
			attr_dev(circle, "cy", "12");
			attr_dev(circle, "r", "8");
			add_location(circle, file, 63, 53, 2260);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			attr_dev(svg, "class", "svelte-so2j8x");
			add_location(svg, file, 57, 8, 2059);
			attr_dev(button, "class", "svelte-so2j8x");
			add_location(button, file, 56, 6, 2016);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, svg);
			append_dev(svg, path);
			append_dev(svg, circle);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*startRecording*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(56:4) {#if status === \\\"idle\\\"}",
		ctx
	});

	return block;
}

// (97:6) {:else}
function create_else_block_1(ctx) {
	let svg;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M0 0h24v24H0zm0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file, 104, 10, 3448);
			attr_dev(path1, "d", "M19 11h-1.7c0 .74-.16 1.43-.43 2.05l1.23 1.23c.56-.98.9-2.09.9-3.28zm-4.02.17c0-.06.02-.11.02-.17V5c0-1.66-1.34-3-3-3S9 3.34 9 5v.18l5.98 5.99zM4.27 3L3 4.27l6.01 6.01V11c0 1.66 1.33 3 2.99 3 .22 0 .44-.03.65-.08l1.66 1.66c-.71.33-1.5.52-2.31.52-2.76 0-5.3-2.1-5.3-5.1H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c.91-.13 1.77-.45 2.54-.9L19.73 21 21 19.73 4.27 3z");
			add_location(path1, file, 104, 61, 3499);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			attr_dev(svg, "class", "svelte-so2j8x");
			add_location(svg, file, 97, 8, 3280);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(97:6) {:else}",
		ctx
	});

	return block;
}

// (86:6) {#if mic}
function create_if_block_1(ctx) {
	let svg;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M0 0h24v24H0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file, 92, 11, 2978);
			attr_dev(path1, "d", "M12 14c1.66 0 2.99-1.34 2.99-3L15 5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 14 6.7 11H5c0 3.41 2.72 6.23 6 6.72V21h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z");
			add_location(path1, file, 92, 49, 3016);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			attr_dev(svg, "class", "svelte-so2j8x");
			add_location(svg, file, 86, 8, 2819);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(86:6) {#if mic}",
		ctx
	});

	return block;
}

// (130:2) {:else}
function create_else_block(ctx) {
	let list_1;
	let current;

	list_1 = new List({
			props: { list: /*list*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(list_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(list_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const list_1_changes = {};
			if (dirty & /*list*/ 4) list_1_changes.list = /*list*/ ctx[2];
			list_1.$set(list_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(list_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(list_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(list_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(130:2) {:else}",
		ctx
	});

	return block;
}

// (128:2) {#if settings}
function create_if_block(ctx) {
	let settings_1;
	let current;
	settings_1 = new Settings({ $$inline: true });

	const block = {
		c: function create() {
			create_component(settings_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(settings_1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(settings_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(settings_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(settings_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(128:2) {#if settings}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let main;
	let div;
	let t0;
	let button0;
	let t1;
	let button1;
	let svg;
	let g;
	let path0;
	let path1;
	let t2;
	let current_block_type_index;
	let if_block2;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[1] === "idle") return create_if_block_2;
		if (/*status*/ ctx[1] === "recording") return create_if_block_3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type && current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*mic*/ ctx[0]) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block1 = current_block_type_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*settings*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			main = element("main");
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			button0 = element("button");
			if_block1.c();
			t1 = space();
			button1 = element("button");
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			t2 = space();
			if_block2.c();
			attr_dev(button0, "class", "svelte-so2j8x");
			add_location(button0, file, 84, 4, 2735);
			attr_dev(path0, "d", "M0,0h24v24H0V0z");
			attr_dev(path0, "fill", "none");
			add_location(path0, file, 120, 11, 4196);
			attr_dev(path1, "d", "M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z");
			add_location(path1, file, 120, 51, 4236);
			add_location(g, file, 119, 8, 4182);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "enable-background", "new 0 0 24 24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "fill", "#ffffff");
			attr_dev(svg, "class", "svelte-so2j8x");
			add_location(svg, file, 111, 6, 3986);
			attr_dev(button1, "class", "svelte-so2j8x");
			add_location(button1, file, 110, 4, 3936);
			attr_dev(div, "class", "buttons svelte-so2j8x");
			add_location(div, file, 54, 2, 1960);
			attr_dev(main, "class", "svelte-so2j8x");
			add_location(main, file, 53, 0, 1951);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			append_dev(div, button0);
			if_block1.m(button0, null);
			append_dev(div, t1);
			append_dev(div, button1);
			append_dev(button1, svg);
			append_dev(svg, g);
			append_dev(g, path0);
			append_dev(g, path1);
			append_dev(main, t2);
			if_blocks[current_block_type_index].m(main, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler*/ ctx[7], false, false, false),
					listen_dev(button1, "click", /*click_handler_1*/ ctx[8], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if (if_block0) if_block0.d(1);
				if_block0 = current_block_type && current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div, t0);
				}
			}

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(button0, null);
				}
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block2 = if_blocks[current_block_type_index];

				if (!if_block2) {
					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block2.c();
				} else {
					if_block2.p(ctx, dirty);
				}

				transition_in(if_block2, 1);
				if_block2.m(main, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);

			if (if_block0) {
				if_block0.d();
			}

			if_block1.d();
			if_blocks[current_block_type_index].d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Popup", slots, []);

	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	let status = bg.execCommand("GET_STATUS") || "idle";
	let list = bg.execCommand("GET_LIST");
	let mic = bg.execCommand("GET_MUTE") || false;
	let settings = false;

	bg.onmessage = message => {
		bg.log("message received:", message);
	};

	setInterval(
		() => {
			$$invalidate(1, status = bg.execCommand("GET_STATUS"));
			$$invalidate(2, list = bg.execCommand("GET_LIST"));
		},
		500
	);

	function startRecording() {
		return __awaiter(this, void 0, void 0, function* () {
			bg.execCommand("START_REC", { audio: !!mic });
		});
	}

	function stopRecording() {
		return __awaiter(this, void 0, void 0, function* () {
			bg.execCommand("STOP_REC");
		});
	}

	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
		const cam = yield navigator.permissions.query({ name: "camera" });
		const mic = yield navigator.permissions.query({ name: "microphone" });

		if (cam.state !== "granted" || mic.state !== "granted") {
			window["chrome"].tabs.create({ url: "permission.html" });
		}
	}));

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Popup> was created with unknown prop '${key}'`);
	});

	const click_handler = () => status === "idle" && $$invalidate(0, mic = !mic);
	const click_handler_1 = () => $$invalidate(3, settings = true);

	$$self.$capture_state = () => ({
		__awaiter,
		onMount,
		bg,
		List,
		Settings,
		status,
		list,
		mic,
		settings,
		startRecording,
		stopRecording
	});

	$$self.$inject_state = $$props => {
		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("list" in $$props) $$invalidate(2, list = $$props.list);
		if ("mic" in $$props) $$invalidate(0, mic = $$props.mic);
		if ("settings" in $$props) $$invalidate(3, settings = $$props.settings);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*mic, bg*/ 65) {
			if (mic) {
				bg.execCommand("UNMUTE");
			} else {
				bg.execCommand("MUTE");
			}
		}
	};

	return [
		mic,
		status,
		list,
		settings,
		startRecording,
		stopRecording,
		bg,
		click_handler,
		click_handler_1
	];
}

class Popup extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Popup",
			options,
			id: create_fragment.name
		});
	}
}

const app = new Popup({
    target: document.body,
});

export default app;
//# sourceMappingURL=popup.js.map
